(* -*- tuareg -*- *)
#require "unix"

let flags = function
  | [] -> ""
  | pkgs ->
    let cmd = "ocamlfind ocamlc -verbose" ^ (
        List.fold_left (fun acc pkg -> acc ^ " -package " ^ pkg) "" pkgs
      ) in
    let ic = Unix.open_process_in
        (cmd ^ " | grep -oEe '-ppx (\"([^\"\\]|\\.)+\"|\\w+)'")
    in
    let rec go ic acc =
      try go ic (acc ^ " " ^ input_line ic) with End_of_file -> close_in ic; acc
    in
    go ic ""


let rewriters = ["ppx_deriving_rpc"]
let flags = flags rewriters

let () = Printf.ksprintf Jbuild_plugin.V1.send {|
(library
 ((name httpsvr)
  (public_name http-svr)
  (wrapped false)
  (flags (:standard %s))
  (modules (:standard \ (http_test test_client test_server)))
  (libraries (astring
              rpclib
              sha
              stunnel
              threads
              xapi-stdext-base64
              xapi-stdext-date
              xapi-stdext-monadic
              xapi-stdext-pervasives
              xapi-stdext-threads
              xapi-stdext-unix
              xcp
              xml-light2))
 ))

(executable
 ((name http_test)
  (modules (http_test))
  (libraries (http-svr
              oUnit
              xapi-stdext-monadic))
 ))

(executable
 ((name test_client)
  (modules (test_client))
  (libraries (http-svr
              oUnit
              xapi-stdext-pervasives
              xapi-stdext-unix))
 ))

(executable
 ((name test_server)
  (modules (test_server))
  (libraries (http-svr
              oUnit
              xapi-stdext-threads
              xapi-stdext-unix))
 ))

(alias
 ((name runtest)
  (deps (http_test.exe))
  (action (run ${<} -runner sequential -verbose true))
 ))
|} flags
